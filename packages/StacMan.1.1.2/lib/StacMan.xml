<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StacMan</name>
    </assembly>
    <members>
        <member name="T:StackExchange.StacMan.Answers.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Answers.Sort.Activity">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Answers.Sort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Answers.Sort.Votes">
            <summary>
            score
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Badges.AllSort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.AllSort.Rank">
            <summary>
            rank
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.AllSort.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.AllSort.Type">
            <summary>
            badge_type
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Badges.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.Sort.Rank">
            <summary>
            rank
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.Sort.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Badges.BadgeType">
            <summary>
            badge_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.BadgeType.Named">
            <summary>
            name
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.BadgeType.TagBased">
            <summary>
            tag_based
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Badges.UserSort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.UserSort.Rank">
            <summary>
            rank
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.UserSort.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.UserSort.Type">
            <summary>
            badge_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.UserSort.Awarded">
            <summary>
            badge award date
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Badges.Rank">
            <summary>
            rank
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.Rank.Gold">
            <summary>
            gold
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.Rank.Silver">
            <summary>
            silver
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Badges.Rank.Bronze">
            <summary>
            bronze
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.AccessToken">
            <summary>
            StacMan AccessToken, corresponding to Stack Exchange API v2's access_token type
            http://api.stackexchange.com/docs/types/access-token
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.AccessToken.AccessTokenName">
            <summary>
            access_token
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.AccessToken.AccountId">
            <summary>
            account_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.AccessToken.ExpiresOnDate">
            <summary>
            expires_on_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.AccessToken.Scope">
            <summary>
            scope
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.AccountMerge">
            <summary>
            StacMan AccountMerge, corresponding to Stack Exchange API v2's account_merge type
            http://api.stackexchange.com/docs/types/account-merge
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.AccountMerge.MergeDate">
            <summary>
            merge_date -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.AccountMerge.NewAccountId">
            <summary>
            new_account_id -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.AccountMerge.OldAccountId">
            <summary>
            old_account_id -- introduced in API version 2.1
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Answer">
            <summary>
            StacMan Answer, corresponding to Stack Exchange API v2's answer type
            http://api.stackexchange.com/docs/types/answer
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.AnswerId">
            <summary>
            answer_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.Comments">
            <summary>
            comments
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.CommunityOwnedDate">
            <summary>
            community_owned_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.DownVoteCount">
            <summary>
            down_vote_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.IsAccepted">
            <summary>
            is_accepted
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.LastActivityDate">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.LastEditDate">
            <summary>
            last_edit_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.LockedDate">
            <summary>
            locked_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.Owner">
            <summary>
            owner
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.QuestionId">
            <summary>
            question_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.Score">
            <summary>
            score
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.Tags">
            <summary>
            tags -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Answer.UpVoteCount">
            <summary>
            up_vote_count
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Badge">
            <summary>
            StacMan Badge, corresponding to Stack Exchange API v2's badge type
            http://api.stackexchange.com/docs/types/badge
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Badge.AwardCount">
            <summary>
            award_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Badge.BadgeId">
            <summary>
            badge_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Badge.BadgeType">
            <summary>
            badge_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Badge.Description">
            <summary>
            description
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Badge.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Badge.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Badge.Rank">
            <summary>
            rank
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Badge.User">
            <summary>
            user
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.BadgeCount">
            <summary>
            StacMan BadgeCount, corresponding to Stack Exchange API v2's badge_count type
            http://api.stackexchange.com/docs/types/badge-count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.BadgeCount.Bronze">
            <summary>
            bronze
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.BadgeCount.Gold">
            <summary>
            gold
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.BadgeCount.Silver">
            <summary>
            silver
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Comment">
            <summary>
            StacMan Comment, corresponding to Stack Exchange API v2's comment type
            http://api.stackexchange.com/docs/types/comment
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.BodyMarkdown">
            <summary>
            body_markdown -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.CommentId">
            <summary>
            comment_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.Edited">
            <summary>
            edited
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.Owner">
            <summary>
            owner
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.PostId">
            <summary>
            post_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.PostType">
            <summary>
            post_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.ReplyToUser">
            <summary>
            reply_to_user
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Comment.Score">
            <summary>
            score
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Error">
            <summary>
            StacMan Error, corresponding to Stack Exchange API v2's error type
            http://api.stackexchange.com/docs/types/error
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Error.Description">
            <summary>
            description
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Error.ErrorId">
            <summary>
            error_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Error.ErrorName">
            <summary>
            error_name
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Event">
            <summary>
            StacMan Event, corresponding to Stack Exchange API v2's event type
            http://api.stackexchange.com/docs/types/event
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Event.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Event.EventId">
            <summary>
            event_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Event.EventType">
            <summary>
            event_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Event.Excerpt">
            <summary>
            excerpt
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Event.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Filter">
            <summary>
            StacMan Filter, corresponding to Stack Exchange API v2's filter type
            http://api.stackexchange.com/docs/types/filter
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Filter.FilterName">
            <summary>
            filter
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Filter.FilterType">
            <summary>
            filter_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Filter.IncludedFields">
            <summary>
            included_fields
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Filter.Default">
            <summary>
            "default" filter
            (each type documents which fields are returned under the default filter)
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Filter.WithBody">
            <summary>
            "withbody" filter
            ("default" plus the *.body fields)
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Filter.None">
            <summary>
            "none" filter
            (empty)
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Filter.Total">
            <summary>
            "total" filter
            (just .total)
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.InboxItem">
            <summary>
            StacMan InboxItem, corresponding to Stack Exchange API v2's inbox_item type
            http://api.stackexchange.com/docs/types/inbox-item
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.AnswerId">
            <summary>
            answer_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.CommentId">
            <summary>
            comment_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.IsUnread">
            <summary>
            is_unread
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.ItemType">
            <summary>
            item_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.QuestionId">
            <summary>
            question_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.Site">
            <summary>
            site
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.InboxItem.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Info">
            <summary>
            StacMan Info, corresponding to Stack Exchange API v2's info type
            http://api.stackexchange.com/docs/types/info
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.AnswersPerMinute">
            <summary>
            answers_per_minute
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.ApiRevision">
            <summary>
            api_revision
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.BadgesPerMinute">
            <summary>
            badges_per_minute
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.NewActiveUsers">
            <summary>
            new_active_users
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.QuestionsPerMinute">
            <summary>
            questions_per_minute
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.Site">
            <summary>
            site
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.TotalAccepted">
            <summary>
            total_accepted
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.TotalAnswers">
            <summary>
            total_answers
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.TotalBadges">
            <summary>
            total_badges
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.TotalComments">
            <summary>
            total_comments
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.TotalQuestions">
            <summary>
            total_questions
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.TotalUnanswered">
            <summary>
            total_unanswered
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.TotalUsers">
            <summary>
            total_users
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Info.TotalVotes">
            <summary>
            total_votes
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.MigrationInfo">
            <summary>
            StacMan MigrationInfo, corresponding to Stack Exchange API v2's migration_info type
            http://api.stackexchange.com/docs/types/migration-info
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.MigrationInfo.OnDate">
            <summary>
            on_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.MigrationInfo.OtherSite">
            <summary>
            other_site
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.MigrationInfo.QuestionId">
            <summary>
            question_id
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.NetworkUser">
            <summary>
            StacMan NetworkUser, corresponding to Stack Exchange API v2's network_user type
            http://api.stackexchange.com/docs/types/network-user
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.AccountId">
            <summary>
            account_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.AnswerCount">
            <summary>
            answer_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.BadgeCounts">
            <summary>
            badge_counts
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.LastAccessDate">
            <summary>
            last_access_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.QuestionCount">
            <summary>
            question_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.Reputation">
            <summary>
            reputation
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.SiteName">
            <summary>
            site_name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.SiteUrl">
            <summary>
            site_url
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.UserId">
            <summary>
            user_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.NetworkUser.UserType">
            <summary>
            user_type
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Notice">
            <summary>
            StacMan Notice, corresponding to Stack Exchange API v2's notice type
            http://api.stackexchange.com/docs/types/notice
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notice.Body">
            <summary>
            body -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notice.CreationDate">
            <summary>
            creation_date -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notice.OwnerUserId">
            <summary>
            owner_user_id -- introduced in API version 2.1
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Notification">
            <summary>
            StacMan Notification, corresponding to Stack Exchange API v2's notification type
            http://api.stackexchange.com/docs/types/notification
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notification.Body">
            <summary>
            body -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notification.CreationDate">
            <summary>
            creation_date -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notification.IsUnread">
            <summary>
            is_unread -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notification.NotificationType">
            <summary>
            notification_type -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notification.PostId">
            <summary>
            post_id -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Notification.Site">
            <summary>
            site -- introduced in API version 2.1
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Post">
            <summary>
            StacMan Post, corresponding to Stack Exchange API v2's post type
            http://api.stackexchange.com/docs/types/post
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.Comments">
            <summary>
            comments
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.DownVoteCount">
            <summary>
            down_vote_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.LastActivityDate">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.LastEditDate">
            <summary>
            last_edit_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.Link">
            <summary>
            link -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.Owner">
            <summary>
            owner
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.PostId">
            <summary>
            post_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.PostType">
            <summary>
            post_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.Score">
            <summary>
            score
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Post.UpVoteCount">
            <summary>
            up_vote_count
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Privilege">
            <summary>
            StacMan Privilege, corresponding to Stack Exchange API v2's privilege type
            http://api.stackexchange.com/docs/types/privilege
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Privilege.Description">
            <summary>
            description
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Privilege.Reputation">
            <summary>
            reputation
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Privilege.ShortDescription">
            <summary>
            short_description
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Question">
            <summary>
            StacMan Question, corresponding to Stack Exchange API v2's question type
            http://api.stackexchange.com/docs/types/question
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.AcceptedAnswerId">
            <summary>
            accepted_answer_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.AnswerCount">
            <summary>
            answer_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Answers">
            <summary>
            answers
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.BountyAmount">
            <summary>
            bounty_amount
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.BountyClosesDate">
            <summary>
            bounty_closes_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.CloseVoteCount">
            <summary>
            close_vote_count -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.ClosedDate">
            <summary>
            closed_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.ClosedReason">
            <summary>
            closed_reason
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Comments">
            <summary>
            comments
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.CommunityOwnedDate">
            <summary>
            community_owned_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.DeleteVoteCount">
            <summary>
            delete_vote_count -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.DownVoteCount">
            <summary>
            down_vote_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.FavoriteCount">
            <summary>
            favorite_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.IsAnswered">
            <summary>
            is_answered
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.LastActivityDate">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.LastEditDate">
            <summary>
            last_edit_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.LockedDate">
            <summary>
            locked_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.MigratedFrom">
            <summary>
            migrated_from
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.MigratedTo">
            <summary>
            migrated_to
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Notice">
            <summary>
            notice -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Owner">
            <summary>
            owner
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.ProtectedDate">
            <summary>
            protected_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.QuestionId">
            <summary>
            question_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.ReopenVoteCount">
            <summary>
            reopen_vote_count -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Score">
            <summary>
            score
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Tags">
            <summary>
            tags
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.UpVoteCount">
            <summary>
            up_vote_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Question.ViewCount">
            <summary>
            view_count
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.QuestionTimeline">
            <summary>
            StacMan QuestionTimeline, corresponding to Stack Exchange API v2's question_timeline type
            http://api.stackexchange.com/docs/types/question-timeline
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.CommentId">
            <summary>
            comment_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.DownVoteCount">
            <summary>
            down_vote_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.Owner">
            <summary>
            owner
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.PostId">
            <summary>
            post_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.QuestionId">
            <summary>
            question_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.RevisionGuid">
            <summary>
            revision_guid
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.TimelineType">
            <summary>
            timeline_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.UpVoteCount">
            <summary>
            up_vote_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.QuestionTimeline.User">
            <summary>
            user
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.RelatedSite">
            <summary>
            StacMan RelatedSite, corresponding to Stack Exchange API v2's related_site type
            http://api.stackexchange.com/docs/types/related-site
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.RelatedSite.ApiSiteParameter">
            <summary>
            api_site_parameter
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.RelatedSite.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.RelatedSite.Relation">
            <summary>
            relation
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.RelatedSite.SiteUrl">
            <summary>
            site_url
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Reputation">
            <summary>
            StacMan Reputation, corresponding to Stack Exchange API v2's reputation type
            http://api.stackexchange.com/docs/types/reputation
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Reputation.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Reputation.OnDate">
            <summary>
            on_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Reputation.PostId">
            <summary>
            post_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Reputation.PostType">
            <summary>
            post_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Reputation.ReputationChange">
            <summary>
            reputation_change
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Reputation.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Reputation.UserId">
            <summary>
            user_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Reputation.VoteType">
            <summary>
            vote_type
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.ReputationHistory">
            <summary>
            StacMan ReputationHistory, corresponding to Stack Exchange API v2's reputation_history type
            http://api.stackexchange.com/docs/types/reputation-history
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ReputationHistory.CreationDate">
            <summary>
            creation_date -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ReputationHistory.PostId">
            <summary>
            post_id -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ReputationHistory.ReputationChange">
            <summary>
            reputation_change -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ReputationHistory.ReputationHistoryType">
            <summary>
            reputation_history_type -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ReputationHistory.UserId">
            <summary>
            user_id -- introduced in API version 2.1
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Revision">
            <summary>
            StacMan Revision, corresponding to Stack Exchange API v2's revision type
            http://api.stackexchange.com/docs/types/revision
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.Comment">
            <summary>
            comment
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.IsRollback">
            <summary>
            is_rollback
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.LastBody">
            <summary>
            last_body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.LastTags">
            <summary>
            last_tags
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.LastTitle">
            <summary>
            last_title
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.PostId">
            <summary>
            post_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.PostType">
            <summary>
            post_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.RevisionGuid">
            <summary>
            revision_guid
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.RevisionNumber">
            <summary>
            revision_number
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.RevisionType">
            <summary>
            revision_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.SetCommunityWiki">
            <summary>
            set_community_wiki
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.Tags">
            <summary>
            tags
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Revision.User">
            <summary>
            user
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.ShallowUser">
            <summary>
            StacMan ShallowUser, corresponding to Stack Exchange API v2's shallow_user type
            http://api.stackexchange.com/docs/types/shallow-user
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ShallowUser.AcceptRate">
            <summary>
            accept_rate
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ShallowUser.DisplayName">
            <summary>
            display_name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ShallowUser.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ShallowUser.ProfileImage">
            <summary>
            profile_image
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ShallowUser.Reputation">
            <summary>
            reputation
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ShallowUser.UserId">
            <summary>
            user_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.ShallowUser.UserType">
            <summary>
            user_type
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Site">
            <summary>
            StacMan Site, corresponding to Stack Exchange API v2's site type
            http://api.stackexchange.com/docs/types/site
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.Aliases">
            <summary>
            aliases
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.ApiSiteParameter">
            <summary>
            api_site_parameter
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.Audience">
            <summary>
            audience
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.ClosedBetaDate">
            <summary>
            closed_beta_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.FaviconUrl">
            <summary>
            favicon_url
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.HighResolutionIconUrl">
            <summary>
            high_resolution_icon_url -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.IconUrl">
            <summary>
            icon_url
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.LaunchDate">
            <summary>
            launch_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.LogoUrl">
            <summary>
            logo_url
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.MarkdownExtensions">
            <summary>
            markdown_extensions
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.OpenBetaDate">
            <summary>
            open_beta_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.RelatedSites">
            <summary>
            related_sites
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.SiteState">
            <summary>
            site_state
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.SiteType">
            <summary>
            site_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.SiteUrl">
            <summary>
            site_url
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.Styling">
            <summary>
            styling
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Site.TwitterAccount">
            <summary>
            twitter_account
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.StacManClient">
            <summary>
            Client for Stack Exchange API v2
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.AccessTokens">
            <summary>
            Stack Exchange API AccessTokens methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Answers">
            <summary>
            Stack Exchange API Answers methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Applications">
            <summary>
            Stack Exchange API Applications methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Badges">
            <summary>
            Stack Exchange API Badges methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Comments">
            <summary>
            Stack Exchange API Comments methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Errors">
            <summary>
            Stack Exchange API Errors methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Events">
            <summary>
            Stack Exchange API Events methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Filters">
            <summary>
            Stack Exchange API Filters methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Inbox">
            <summary>
            Stack Exchange API Inbox methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Info">
            <summary>
            Stack Exchange API Info methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Notifications">
            <summary>
            Stack Exchange API Notifications methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Posts">
            <summary>
            Stack Exchange API Posts methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Privileges">
            <summary>
            Stack Exchange API Privileges methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Questions">
            <summary>
            Stack Exchange API Questions methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Revisions">
            <summary>
            Stack Exchange API Revisions methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Search">
            <summary>
            Stack Exchange API Search methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Sites">
            <summary>
            Stack Exchange API Sites methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.SuggestedEdits">
            <summary>
            Stack Exchange API SuggestedEdits methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Tags">
            <summary>
            Stack Exchange API Tags methods
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.Users">
            <summary>
            Stack Exchange API Users methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.StacManClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.StacMan.StacManClient"/> class.
            </summary>
            <param name="key">Your app's Stack Exchange API V2 key (optional)</param>
            <param name="version">Stack Exchange API version, e.g. "2.0" or "2.1"</param>
        </member>
        <member name="M:StackExchange.StacMan.StacManClient.SetUrlManager(System.Func{System.String,System.String})">
            <summary>
            Provide a custom url inspector and manipulator to be applied to all requests
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.ApiTimeoutMs">
            <summary>
            Gets or sets the number of milliseconds to wait before a request to the Stack Exchange API times out.
            <para>Default is 5000.</para>
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.MaxSimultaneousRequests">
            <summary>
            Gets or sets the maximum number of simultaneous requests to the Stack Exchange API that can be active at any given time.
            Additional requests are queued up.
            <para>Default is 10.</para>
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.RespectBackoffs">
            <summary>
            Gets or sets whether StacMan should automatically abide by the "backoff" returned by the API (http://api.stackexchange.com/docs/throttle).
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManClient.UserAgent">
            <summary>
            Gets or sets the user-agent to use from this client (if not set, StacMan is used)
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.StacManClient.FetchApiResponseWithGET(System.String,System.Action{System.String},System.Action{System.Exception})">
            <summary>
            this is "internal protected virtual" so it can be mocked in unit tests
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.StacManClient.FetchApiResponseWithPOST(System.String,System.String,System.Action{System.String},System.Action{System.Exception})">
            <summary>
            this is "internal protected virtual" so it can be mocked in unit tests
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IAccessTokenMethods">
            <summary>
            Stack Exchange API AccessTokens methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IAccessTokenMethods.Invalidate(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Allows an application to dispose of access_tokens when it is done with them. (API Method: "/access-tokens/{accessTokens}/invalidate")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IAccessTokenMethods.Get(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Allows an application to inspect access_tokens it has, useful for debugging. (API Method: "/access-tokens/{accessTokens}")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IAnswerMethods">
            <summary>
            Stack Exchange API Answers methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IAnswerMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Answers.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get all answers on the site. (API Method: "/answers")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IAnswerMethods.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Answers.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get answers identified by a set of ids. (API Method: "/answers/{ids}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IAnswerMethods.GetComments(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get comments on the answers identified by a set of ids. (API Method: "/answers/{ids}/comments")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IApplicationMethods">
            <summary>
            Stack Exchange API Applications methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IApplicationMethods.Deauthenticate(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Allows an application to de-authorize itself for a set of users. (API Method: "/apps/{accessTokens}/de-authenticate")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IBadgeMethods">
            <summary>
            Stack Exchange API Badges methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IBadgeMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Badges.AllSort},System.Nullable{StackExchange.StacMan.Badges.Rank},System.Nullable{StackExchange.StacMan.Badges.Rank},System.String,System.String,System.Nullable{StackExchange.StacMan.Badges.BadgeType},System.Nullable{StackExchange.StacMan.Badges.BadgeType},System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get all badges on the site, in alphabetical order. (API Method: "/badges")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IBadgeMethods.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Badges.AllSort},System.Nullable{StackExchange.StacMan.Badges.Rank},System.Nullable{StackExchange.StacMan.Badges.Rank},System.String,System.String,System.Nullable{StackExchange.StacMan.Badges.BadgeType},System.Nullable{StackExchange.StacMan.Badges.BadgeType},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the badges identified by ids. (API Method: "/badges/{ids}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IBadgeMethods.GetNamed(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Badges.Sort},System.Nullable{StackExchange.StacMan.Badges.Rank},System.Nullable{StackExchange.StacMan.Badges.Rank},System.String,System.String,System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get all non-tagged-based badges in alphabetical order. (API Method: "/badges/name")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IBadgeMethods.GetRecent(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get badges recently awarded on the site. (API Method: "/badges/recipients")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IBadgeMethods.GetRecentByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get the recent recipients of the given badges. (API Method: "/badges/{ids}/recipients")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IBadgeMethods.GetTagBased(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Badges.Sort},System.Nullable{StackExchange.StacMan.Badges.Rank},System.Nullable{StackExchange.StacMan.Badges.Rank},System.String,System.String,System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get all tagged-based badges in alphabetical order. (API Method: "/badges/tags")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.ICommentMethods">
            <summary>
            Stack Exchange API Comments methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ICommentMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get all comments on the site. (API Method: "/comments")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ICommentMethods.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get comments identified by a set of ids. (API Method: "/comments/{ids}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ICommentMethods.Delete(System.String,System.String,System.Int32,System.String,System.Nullable{System.Boolean})">
            <summary>
            Delete a comment identified by its id. [auth required] (API Method: "/comments/{id}/delete") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ICommentMethods.Edit(System.String,System.String,System.Int32,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Edit a comment identified by its id. [auth required] (API Method: "/comments/{id}/edit") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IErrorMethods">
            <summary>
            Stack Exchange API Errors methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IErrorMethods.GetAll(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get descriptions of all the errors that the API could return. (API Method: "/errors")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IErrorMethods.Simulate(System.Int32,System.String)">
            <summary>
            Simulate an API error for testing purposes. (API Method: "/errors/{id}")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IEventMethods">
            <summary>
            Stack Exchange API Events methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IEventMethods.GetRecent(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get recent events that have occurred on the site. Effectively a stream of new users and content. [auth required] (API Method: "/events")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IFilterMethods">
            <summary>
            Stack Exchange API Filters methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IFilterMethods.Read(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Decode a set of filters, useful for debugging purposes. (API Method: "/filters/{filters}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IFilterMethods.Create(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Boolean})">
            <summary>
            Create a new filter. (API Method: "/filters/create")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IInboxMethods">
            <summary>
            Stack Exchange API Inbox methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IInboxMethods.Get(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a user's inbox, outside of the context of a site. [auth required] (API Method: "/inbox")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IInboxMethods.GetUnread(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get the unread items in a user's inbox, outside of the context of a site. [auth required] (API Method: "/inbox/unread")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IInfoMethods">
            <summary>
            Stack Exchange API Info methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IInfoMethods.Get(System.String,System.String)">
            <summary>
            Get information about the entire site. (API Method: "/info")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.INotificationMethods">
            <summary>
            Stack Exchange API Notifications methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.INotificationMethods.Get(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a user's notifications, outside of the context of a site. [auth required] (API Method: "/notifications") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.INotificationMethods.GetUnread(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a user's unread notifications, outside of the context of a site. [auth required] (API Method: "/notifications/unread") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IPostMethods">
            <summary>
            Stack Exchange API Posts methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IPostMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Posts.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get all posts (questions and answers) in the system. (API Method: "/posts")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IPostMethods.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Posts.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get all posts identified by a set of ids. Useful for when the type of post (question or answer) is not known. (API Method: "/posts/{ids}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IPostMethods.GetComments(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get comments on the posts (question or answer) identified by a set of ids. (API Method: "/posts/{ids}/comments")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IPostMethods.AddComment(System.String,System.String,System.Int32,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create a new comment on the post identified by id. [auth required] (API Method: "/posts/{id}/comments/add") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IPostMethods.GetRevisions(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get revisions on the set of posts in ids. (API Method: "/posts/{ids}/revisions")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IPostMethods.GetSuggestedEdits(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.SuggestedEdits.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get suggested edits on the set of posts in ids. (API Method: "/posts/{ids}/suggested-edits")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IPrivilegeMethods">
            <summary>
            Stack Exchange API Privileges methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IPrivilegeMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all the privileges available on the site. (API Method: "/privileges")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IQuestionMethods">
            <summary>
            Stack Exchange API Questions methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.AllSort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get all questions on the site. (API Method: "/questions")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions identified by a set of ids. (API Method: "/questions/{ids}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetAnswers(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Answers.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the answers to the questions identified by a set of ids. (API Method: "/questions/{ids}/answers")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetComments(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the comments on the questions identified by a set of ids. (API Method: "/questions/{ids}/comments")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetLinked(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.RelatedSort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions that link to the questions identified by a set of ids. (API Method: "/questions/{ids}/linked")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetRelated(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.RelatedSort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions that are related to the questions identified by a set of ids. (API Method: "/questions/{ids}/related")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetTimelines(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get the timelines of the questions identified by a set of ids. (API Method: "/questions/{ids}/timeline")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetFeatured(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get all questions on the site with active bounties. (API Method: "/questions/featured")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetUnanswered(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get all questions the site considers unanswered. (API Method: "/questions/unanswered")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IQuestionMethods.GetWithNoAnswers(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get all questions on the site with no answers. (API Method: "/questions/no-answers")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IRevisionMethods">
            <summary>
            Stack Exchange API Revisions methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IRevisionMethods.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get all revisions identified by a set of ids. (API Method: "/revisions/{ids}")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.ISearchMethods">
            <summary>
            Stack Exchange API Search methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ISearchMethods.GetMatches(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.SearchSort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order},System.String,System.String,System.String)">
            <summary>
            Search the site for questions meeting certain criteria. (API Method: "/search")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ISearchMethods.GetMatchesAdvanced(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.SearchSort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Search the site for questions using most of the on-site search options. (API Method: "/search/advanced") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ISearchMethods.GetSimilar(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.SearchSort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order},System.String,System.String,System.String)">
            <summary>
            Search the site based on similarity to a title. (API Method: "/similar")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.ISiteMethods">
            <summary>
            Stack Exchange API Sites methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ISiteMethods.GetAll(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all the sites in the Stack Exchange network. (API Method: "/sites")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.ISuggestedEditMethods">
            <summary>
            Stack Exchange API SuggestedEdits methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ISuggestedEditMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.SuggestedEdits.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get all the suggested edits on the site. (API Method: "/suggested-edits")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ISuggestedEditMethods.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.SuggestedEdits.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the suggested edits identified by a set of ids. (API Method: "/suggested-edits/{ids}")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.ITagMethods">
            <summary>
            Stack Exchange API Tags methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Tags.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get the tags on the site. (API Method: "/tags")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetByName(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Tags.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get tags on the site by their names. (API Method: "/tags/{tags}/info")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetModeratorOnly(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Tags.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get the tags on the site that only moderators can use. (API Method: "/tags/moderator-only")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetRequired(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Tags.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get the tags on the site that fulfill required tag constraints. (API Method: "/tags/required")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetAllSynonyms(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.TagSynonyms.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get all the tag synonyms on the site. (API Method: "/tags/synonyms")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetFrequentlyAsked(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get frequently asked questions in a set of tags. (API Method: "/tags/{tags}/faq")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetRelated(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            /tags/{tags}/related (API Method: "/tags/{tags}/related")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetSynonymsForTags(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.TagSynonyms.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the synonyms for a specific set of tags. (API Method: "/tags/{tags}/synonyms")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetTopAnswerers(System.String,System.String,StackExchange.StacMan.Tags.Period,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the top answer posters in a specific tag, either in the last month or for all time. (API Method: "/tags/{tag}/top-answerers/{period}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetTopAskers(System.String,System.String,StackExchange.StacMan.Tags.Period,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the top question askers in a specific tag, either in the last month or for all time. (API Method: "/tags/{tag}/top-askers/{period}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.ITagMethods.GetTagWikis(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the wiki entries for a set of tags. (API Method: "/tags/{tags}/wikis")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.IUserMethods">
            <summary>
            Stack Exchange API Users methods
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetAll(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Users.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order},System.String)">
            <summary>
            Get all users on the site. (API Method: "/users")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Users.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the users identified by a set of ids. (API Method: "/users/{ids}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMe(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Users.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the authenticated user [auth required] (API Method: "/me")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetAnswers(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Answers.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the answers posted by the users identified by a set of ids. (API Method: "/users/{ids}/answers")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyAnswers(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Answers.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the answers posted by the authenticated user. [auth required] (API Method: "/me/answers")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetBadges(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Badges.UserSort},System.Nullable{StackExchange.StacMan.Badges.Rank},System.Nullable{StackExchange.StacMan.Badges.Rank},System.String,System.String,System.Nullable{StackExchange.StacMan.Badges.BadgeType},System.Nullable{StackExchange.StacMan.Badges.BadgeType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the badges earned by the users identified by a set of ids. (API Method: "/users/{ids}/badges")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyBadges(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Badges.UserSort},System.Nullable{StackExchange.StacMan.Badges.Rank},System.Nullable{StackExchange.StacMan.Badges.Rank},System.String,System.String,System.Nullable{StackExchange.StacMan.Badges.BadgeType},System.Nullable{StackExchange.StacMan.Badges.BadgeType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the badges earned by the authenticated user. [auth required] (API Method: "/me/badges")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetComments(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the comments posted by the users identified by a set of ids. (API Method: "/users/{ids}/comments")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyComments(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the comments posted by the authenticated user. [auth required] (API Method: "/me/comments")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetCommentsToUser(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the comments posted by a set of users in reply to another user. (API Method: "/users/{ids}/comments/{toid}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyCommentsToUser(System.String,System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the comments posted by the authenticated user in reply to another user. [auth required] (API Method: "/me/comments/{toid}")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetFavorites(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.FavoriteSort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions favorited by users identified by a set of ids. (API Method: "/users/{ids}/favorites")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyFavorites(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.FavoriteSort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions favorited by the authenticated user. [auth required] (API Method: "/me/favorites")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetCommentsMentionedIn(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the comments that mention one of the users identified by a set of ids. (API Method: "/users/{ids}/mentioned")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyCommentsMentionedIn(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Comments.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the comments that mention the authenticated user. [auth required] (API Method: "/me/mentioned")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMerges(System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the merges a user's accounts has undergone. (API Method: "/users/{ids}/merges") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyMerges(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the merges the authenticated user's accounts has undergone. [auth required] (API Method: "/me/merges") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetNotifications(System.String,System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a user's notifications. [auth required] (API Method: "/users/{id}/notifications") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyNotifications(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the authenticated user's notifications. [auth required] (API Method: "/me/notifications") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetUnreadNotifications(System.String,System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a user's unread notifications. [auth required] (API Method: "/users/{id}/notifications/unread") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyUnreadNotifications(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the authenticated user's unread notifications. [auth required] (API Method: "/me/notifications/unread") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetPrivileges(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the privileges the given user has on the site. (API Method: "/users/{id}/privileges")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyPrivileges(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the privileges the authenticated user has on the site. [auth required] (API Method: "/me/privileges")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetQuestions(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions asked by the users identified by a set of ids. (API Method: "/users/{ids}/questions")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyQuestions(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions asked by the authenticated user. [auth required] (API Method: "/me/questions")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetFeaturedQuestions(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions on which a set of users have active bounties. (API Method: "/users/{ids}/questions/featured")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyFeaturedQuestions(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions on which the authenticated user has active bounties. [auth required] (API Method: "/me/questions/featured")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetQuestionsWithNoAnswers(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions asked by a set of users which have no answers. (API Method: "/users/{ids}/questions/featured")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyQuestionsWithNoAnswers(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions asked by the authenticated user which have no answers. [auth required] (API Method: "/me/questions/featured")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetQuestionsWithUnaccepted(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions asked by a set of users which have at least one answer but no accepted answer. (API Method: "/users/{ids}/questions/unaccepted")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyQuestionsWithUnaccepted(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions asked by the authenticated user which have at least one answer but no accepted answer. [auth required] (API Method: "/me/questions/unaccepted")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetUnansweredQuestions(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions asked by a set of users which are not considered to be adequately answered. (API Method: "/users/{ids}/questions/unanswered")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyUnansweredQuestions(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the questions asked by the authenticated user which are not considered to be adequately answered. [auth required] (API Method: "/me/questions/unanswered")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetReputation(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get a subset of the reputation changes experienced by the users identified by a set of ids. (API Method: "/users/{ids}/reputation")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyReputation(System.String,System.String,System.String)">
            <summary>
            Get a subset of the reputation changes experienced by the authenticated user. [auth required] (API Method: "/me/reputation")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetReputationHistory(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a history of a user's reputation, excluding private events. (API Method: "/users/{ids}/reputation-history") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyReputationHistory(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a history of the authenticated user's reputation, excluding private events. [auth required] (API Method: "/me/reputation-history") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetReputationHistoryFull(System.String,System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a full history of a user's reputation. [auth required] (API Method: "/users/{id}/reputation-history/full") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyReputationHistoryFull(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a full history of the authenticated user's reputation. [auth required] (API Method: "/me/reputation-history/full") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetSuggestedEdits(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.SuggestedEdits.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the suggested edits provided by the users identified by a set of ids. (API Method: "/users/{ids}/suggested-edits")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMySuggestedEdits(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.SuggestedEdits.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the suggested edits provided by the authenticated user. [auth required] (API Method: "/me/suggested-edits")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetTags(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Tags.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the tags that the users (identified by a set of ids) have been active in. (API Method: "/users/{ids}/tags")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyTags(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Tags.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the tags that the authenticated user has been active in. [auth required] (API Method: "/me/tags")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetTopAnswers(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Answers.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the top answers a user has posted on questions with a set of tags. (API Method: "/users/{id}/tags/{tags}/top-answers")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyTopAnswers(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Answers.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the top answers the authenticated user has posted on questions with a set of tags. [auth required] (API Method: "/me/tags/{tags}/top-answers")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetTopQuestions(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the top questions a user has posted with a set of tags. (API Method: "/users/{id}/tags/{tags}/top-questions")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyTopQuestions(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Questions.Sort},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the top questions the authenticated user has posted with a set of tags. [auth required] (API Method: "/me/tags/{tags}/top-questions")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetTimelines(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get a subset of the actions of that have been taken by the users identified by a set of ids. (API Method: "/users/{ids}/timeline")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyTimeline(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get a subset of the actions of that have been taken by the authenicated user. [auth required] (API Method: "/me/timeline")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetTopAnswerTags(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the top tags (by score) a single user has posted answers in. (API Method: "/users/{id}/top-answer-tags")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetTopAnswerTags(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the top tags (by score) that users identified by a set of ids have posted answers in. (API Method: "/users/{ids}/top-answer-tags") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyTopAnswerTags(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the top tags (by score) the authenticated user has posted answers in. [auth required] (API Method: "/me/top-answer-tags")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetTopQuestionTags(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the top tags (by score) a single user has asked questions in. (API Method: "/users/{id}/top-question-tags")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetTopQuestionTags(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the top tags (by score) that users identified by a set of ids have asked questions in. (API Method: "/users/{ids}/top-question-tags") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyTopQuestionTags(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the top tags (by score) the authenticated user has asked questions in. [auth required] (API Method: "/me/top-question-tags")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetWritePermissions(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the write access a user has via the API. (API Method: "/users/{id}/write-permissions") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyWritePermissions(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the write access the authenticated user has via the API. [auth required] (API Method: "/me/write-permissions") -- introduced in API version 2.1
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetModerators(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Users.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the users who have moderation powers on the site. (API Method: "/users/moderators")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetElectedModerators(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{StackExchange.StacMan.Users.Sort},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{StackExchange.StacMan.Order})">
            <summary>
            Get the users who have moderation powers on the site, and were actually elected. (API Method: "/users/moderators/elected")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetInbox(System.String,System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a user's inbox. [auth required] (API Method: "/users/{id}/inbox")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyInbox(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the authenticated user's inbox. [auth required] (API Method: "/me/inbox")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetInboxUnread(System.String,System.String,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get the unread items in a user's inbox. [auth required] (API Method: "/users/{id}/inbox/unread")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyInboxUnread(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get the unread items in the authenticated user's inbox. [auth required] (API Method: "/me/inbox/unread")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetAssociated(System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get a user's associated accounts. (API Method: "/users/{ids}/associated")
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.IUserMethods.GetMyAssociated(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the associated user's associated accounts. [auth required] (API Method: "/me/associated")
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Styling">
            <summary>
            StacMan Styling, corresponding to Stack Exchange API v2's styling type
            http://api.stackexchange.com/docs/types/styling
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Styling.LinkColor">
            <summary>
            link_color
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Styling.TagBackgroundColor">
            <summary>
            tag_background_color
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Styling.TagForegroundColor">
            <summary>
            tag_foreground_color
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.SuggestedEdit">
            <summary>
            StacMan SuggestedEdit, corresponding to Stack Exchange API v2's suggested_edit type
            http://api.stackexchange.com/docs/types/suggested-edit
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.ApprovalDate">
            <summary>
            approval_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.Comment">
            <summary>
            comment
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.PostId">
            <summary>
            post_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.PostType">
            <summary>
            post_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.ProposingUser">
            <summary>
            proposing_user
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.RejectionDate">
            <summary>
            rejection_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.SuggestedEditId">
            <summary>
            suggested_edit_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.Tags">
            <summary>
            tags
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.SuggestedEdit.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Tag">
            <summary>
            StacMan Tag, corresponding to Stack Exchange API v2's tag type
            http://api.stackexchange.com/docs/types/tag
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Tag.Count">
            <summary>
            count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Tag.HasSynonyms">
            <summary>
            has_synonyms
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Tag.IsModeratorOnly">
            <summary>
            is_moderator_only
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Tag.IsRequired">
            <summary>
            is_required
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Tag.LastActivityDate">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Tag.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Tag.UserId">
            <summary>
            user_id
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.TagScore">
            <summary>
            StacMan TagScore, corresponding to Stack Exchange API v2's tag_score type
            http://api.stackexchange.com/docs/types/tag-score
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagScore.PostCount">
            <summary>
            post_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagScore.Score">
            <summary>
            score
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagScore.User">
            <summary>
            user
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.TagSynonym">
            <summary>
            StacMan TagSynonym, corresponding to Stack Exchange API v2's tag_synonym type
            http://api.stackexchange.com/docs/types/tag-synonym
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagSynonym.AppliedCount">
            <summary>
            applied_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagSynonym.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagSynonym.FromTag">
            <summary>
            from_tag
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagSynonym.LastAppliedDate">
            <summary>
            last_applied_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagSynonym.ToTag">
            <summary>
            to_tag
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.TagWiki">
            <summary>
            StacMan TagWiki, corresponding to Stack Exchange API v2's tag_wiki type
            http://api.stackexchange.com/docs/types/tag-wiki
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagWiki.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagWiki.BodyLastEditDate">
            <summary>
            body_last_edit_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagWiki.Excerpt">
            <summary>
            excerpt
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagWiki.ExcerptLastEditDate">
            <summary>
            excerpt_last_edit_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagWiki.LastBodyEditor">
            <summary>
            last_body_editor
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagWiki.LastExcerptEditor">
            <summary>
            last_excerpt_editor
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TagWiki.TagName">
            <summary>
            tag_name
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.TopTag">
            <summary>
            StacMan TopTag, corresponding to Stack Exchange API v2's top_tag type
            http://api.stackexchange.com/docs/types/top-tag
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TopTag.AnswerCount">
            <summary>
            answer_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TopTag.AnswerScore">
            <summary>
            answer_score
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TopTag.QuestionCount">
            <summary>
            question_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TopTag.QuestionScore">
            <summary>
            question_score
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TopTag.TagName">
            <summary>
            tag_name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.TopTag.UserId">
            <summary>
            user_id -- introduced in API version 2.1
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.User">
            <summary>
            StacMan User, corresponding to Stack Exchange API v2's user type
            http://api.stackexchange.com/docs/types/user
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.AboutMe">
            <summary>
            about_me
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.AcceptRate">
            <summary>
            accept_rate
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.AccountId">
            <summary>
            account_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.Age">
            <summary>
            age
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.AnswerCount">
            <summary>
            answer_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.BadgeCounts">
            <summary>
            badge_counts
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.DisplayName">
            <summary>
            display_name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.DownVoteCount">
            <summary>
            down_vote_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.IsEmployee">
            <summary>
            is_employee
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.LastAccessDate">
            <summary>
            last_access_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.LastModifiedDate">
            <summary>
            last_modified_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.Location">
            <summary>
            location
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.ProfileImage">
            <summary>
            profile_image
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.QuestionCount">
            <summary>
            question_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.Reputation">
            <summary>
            reputation
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.ReputationChangeDay">
            <summary>
            reputation_change_day
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.ReputationChangeMonth">
            <summary>
            reputation_change_month
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.ReputationChangeQuarter">
            <summary>
            reputation_change_quarter
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.ReputationChangeWeek">
            <summary>
            reputation_change_week
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.ReputationChangeYear">
            <summary>
            reputation_change_year
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.TimedPenaltyDate">
            <summary>
            timed_penalty_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.UpVoteCount">
            <summary>
            up_vote_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.UserId">
            <summary>
            user_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.UserType">
            <summary>
            user_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.ViewCount">
            <summary>
            view_count
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.User.WebsiteUrl">
            <summary>
            website_url
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.UserTimeline">
            <summary>
            StacMan UserTimeline, corresponding to Stack Exchange API v2's user_timeline type
            http://api.stackexchange.com/docs/types/user-timeline
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.BadgeId">
            <summary>
            badge_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.CommentId">
            <summary>
            comment_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.CreationDate">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.Detail">
            <summary>
            detail
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.Link">
            <summary>
            link
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.PostId">
            <summary>
            post_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.PostType">
            <summary>
            post_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.SuggestedEditId">
            <summary>
            suggested_edit_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.TimelineType">
            <summary>
            timeline_type
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.UserTimeline.UserId">
            <summary>
            user_id
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Wrapper`1">
            <summary>
            StacMan Wrapper, corresponding to Stack Exchange API v2's common wrapper type
            http://api.stackexchange.com/docs/wrapper
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.Backoff">
            <summary>
            backoff
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.ErrorId">
            <summary>
            error_id
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.ErrorMessage">
            <summary>
            error_message
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.ErrorName">
            <summary>
            error_name
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.HasMore">
            <summary>
            has_more
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.Items">
            <summary>
            items
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.Page">
            <summary>
            page
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.PageSize">
            <summary>
            page_size
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.QuotaMax">
            <summary>
            quota_max
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.QuotaRemaining">
            <summary>
            quota_remaining
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.Total">
            <summary>
            total
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.Wrapper`1.Type">
            <summary>
            type
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.WritePermission">
            <summary>
            StacMan WritePermission, corresponding to Stack Exchange API v2's write_permission type
            http://api.stackexchange.com/docs/types/write-permission
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.WritePermission.CanAdd">
            <summary>
            can_add -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.WritePermission.CanDelete">
            <summary>
            can_delete -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.WritePermission.CanEdit">
            <summary>
            can_edit -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.WritePermission.MaxDailyActions">
            <summary>
            max_daily_actions -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.WritePermission.MinSecondsBetweenActions">
            <summary>
            min_seconds_between_actions -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.WritePermission.ObjectType">
            <summary>
            object_type -- introduced in API version 2.1
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.WritePermission.UserId">
            <summary>
            user_id -- introduced in API version 2.1
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Comments.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Comments.Sort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Comments.Sort.Votes">
            <summary>
            score
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Events.EventType">
            <summary>
            event_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Events.EventType.QuestionPosted">
            <summary>
            question_posted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Events.EventType.AnswerPosted">
            <summary>
            answer_posted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Events.EventType.CommentPosted">
            <summary>
            comment_posted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Events.EventType.PostEdited">
            <summary>
            post_edited
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Events.EventType.UserCreated">
            <summary>
            user_created
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Exceptions.StackExchangeApiException">
            <summary>
            An error encountered during a Stack Exchange API v2 method call.
            http://api.stackexchange.com/docs/error-handling
            </summary>
        </member>
        <member name="M:StackExchange.StacMan.Exceptions.StackExchangeApiException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Create a new StackExchangeApiException
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Exceptions.StackExchangeApiException.ErrorId">
            <summary>
            error_id
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Exceptions.StackExchangeApiException.ErrorName">
            <summary>
            error_name
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Exceptions.StackExchangeApiException.ErrorMessage">
            <summary>
            error_message
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Filters.FilterType">
            <summary>
            filter_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Filters.FilterType.Safe">
            <summary>
            safe
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Filters.FilterType.Unsafe">
            <summary>
            unsafe
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Filters.FilterType.Invalid">
            <summary>
            invalid
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.InboxItems.ItemType">
            <summary>
            item_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.InboxItems.ItemType.Comment">
            <summary>
            comment
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.InboxItems.ItemType.ChatMessage">
            <summary>
            chat_message
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.InboxItems.ItemType.NewAnswer">
            <summary>
            new_answer
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.InboxItems.ItemType.CareersMessage">
            <summary>
            careers_message
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.InboxItems.ItemType.CareersInvitations">
            <summary>
            careers_invitations
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.InboxItems.ItemType.MetaQuestion">
            <summary>
            meta_question
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.InboxItems.ItemType.PostNotice">
            <summary>
            post_notice
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.InboxItems.ItemType.ModeratorMessage">
            <summary>
            moderator_message
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Notifications.NotificationType">
            <summary>
            notification_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.Generic">
            <summary>
            generic
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.ProfileActivity">
            <summary>
            profile_activity
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.BountyExpired">
            <summary>
            bounty_expired
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.BountyExpiresInOneDay">
            <summary>
            bounty_expires_in_one_day
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.BountyExpiresInThreeDays">
            <summary>
            bounty_expires_in_three_days
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.BadgeEarned">
            <summary>
            badge_earned
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.ReputationBonus">
            <summary>
            reputation_bonus
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.AccountsAssociated">
            <summary>
            accounts_associated
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.NewPrivilege">
            <summary>
            new privilege
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.PostMigrated">
            <summary>
            post migrated
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.ModeratorMessage">
            <summary>
            moderator_message
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.RegistrationReminder">
            <summary>
            registration_reminder
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.EditSuggested">
            <summary>
            edit_suggested
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Notifications.NotificationType.SubstantiveEdit">
            <summary>
            substantive_edit
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Order">
            <summary>
            order
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Order.Asc">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Order.Desc">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Posts.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Posts.Sort.Activity">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Posts.Sort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Posts.Sort.Votes">
            <summary>
            score
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Posts.PostType">
            <summary>
            post_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Posts.PostType.Question">
            <summary>
            question
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Posts.PostType.Answer">
            <summary>
            answer
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Questions.AllSort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.AllSort.Activity">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.AllSort.Votes">
            <summary>
            score
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.AllSort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.AllSort.Hot">
            <summary>
            by the formula ordering the hot tab
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.AllSort.Week">
            <summary>
            by the formula ordering the week tab
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.AllSort.Month">
            <summary>
            by the formula ordering the month tab
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Questions.FavoriteSort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.FavoriteSort.Activity">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.FavoriteSort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.FavoriteSort.Votes">
            <summary>
            score
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.FavoriteSort.Added">
            <summary>
            when the user favorited the question
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Questions.RelatedSort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.RelatedSort.Activity">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.RelatedSort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.RelatedSort.Votes">
            <summary>
            score
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.RelatedSort.Rank">
            <summary>
            a priority sort by site applies, subject to change at any time
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Questions.SearchSort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.SearchSort.Activity">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.SearchSort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.SearchSort.Votes">
            <summary>
            score
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.SearchSort.Relevance">
            <summary>
            matches the relevance tab on the site itself
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Questions.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.Sort.Activity">
            <summary>
            last_activity_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.Sort.Votes">
            <summary>
            score
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Questions.Sort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.QuestionTimelines.TimelineType">
            <summary>
            timeline_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.QuestionTimelines.TimelineType.Question">
            <summary>
            question
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.QuestionTimelines.TimelineType.Answer">
            <summary>
            answer
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.QuestionTimelines.TimelineType.Comment">
            <summary>
            comment
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.QuestionTimelines.TimelineType.UnacceptedAnswer">
            <summary>
            unaccepted_answer
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.QuestionTimelines.TimelineType.AcceptedAnswer">
            <summary>
            accepted_answer
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.QuestionTimelines.TimelineType.VoteAggregate">
            <summary>
            vote_aggregate
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.QuestionTimelines.TimelineType.Revision">
            <summary>
            revision
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.QuestionTimelines.TimelineType.PostStateChanged">
            <summary>
            post_state_changed
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.ReputationHistories.ReputationHistoryType">
            <summary>
            reputation_history_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.AskerAcceptsAnswer">
            <summary>
            asker_accepts_answer
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.AskerUnacceptAnswer">
            <summary>
            askwer_unaccept_answer
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.AnswerAccepted">
            <summary>
            answer_accepted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.AnswerUnaccepted">
            <summary>
            answer_unaccepted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.VoterDownvotes">
            <summary>
            voter_downvotes
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.VoterUndownvotes">
            <summary>
            voter_undownvotes
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostDownvoted">
            <summary>
            post_downvoted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostUndownvoted">
            <summary>
            post_undownvoted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostUpvoted">
            <summary>
            post_upvoted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostUnupvoted">
            <summary>
            post_unupvoted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.SuggestedEditApprovalReceived">
            <summary>
            suggested_edit_approval_received
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostFlaggedAsSpam">
            <summary>
            post_flagged_as_spam
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostFlaggedAsOffensive">
            <summary>
            post_flagged_as_offensive
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.BountyGiven">
            <summary>
            bounty_given
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.BountyEarned">
            <summary>
            bounty_earned
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.BountyCancelled">
            <summary>
            bounty_cancelled
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostDeleted">
            <summary>
            post_deleted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostUndeleted">
            <summary>
            post_undeleted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.AssociationBonus">
            <summary>
            association_bonus
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.ArbitraryReputationChange">
            <summary>
            arbitrary_reputation_change
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.VoteFraudReversal">
            <summary>
            vote_fraud_reversal
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.PostMigrated">
            <summary>
            post_migrated
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.ReputationHistories.ReputationHistoryType.UserDeleted">
            <summary>
            user_deleted
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Reputations.VoteType">
            <summary>
            vote_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Reputations.VoteType.Accepts">
            <summary>
            accepts
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Reputations.VoteType.UpVotes">
            <summary>
            up_votes
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Reputations.VoteType.DownVotes">
            <summary>
            down_votes
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Reputations.VoteType.BountiesOffered">
            <summary>
            bounties_offered
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Reputations.VoteType.BountiesWon">
            <summary>
            bounties_won
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Reputations.VoteType.Spam">
            <summary>
            spam
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Reputations.VoteType.SuggestedEdits">
            <summary>
            suggested_edits
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Revisions.RevisionType">
            <summary>
            revision_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Revisions.RevisionType.SingleUser">
            <summary>
            single_user
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Revisions.RevisionType.VoteBased">
            <summary>
            vote_based
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Sites.SiteState">
            <summary>
            site_state
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Sites.SiteState.Normal">
            <summary>
            normal
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Sites.SiteState.ClosedBeta">
            <summary>
            closed_beta
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Sites.SiteState.OpenBeta">
            <summary>
            open_beta
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Sites.SiteState.LinkedMeta">
            <summary>
            linked_meta
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.SuggestedEdits.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.SuggestedEdits.Sort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.SuggestedEdits.Sort.Approval">
            <summary>
            approval_date (does not return unapproved suggested_edits)
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.SuggestedEdits.Sort.Rejection">
            <summary>
            rejection_date (does not return unrejected suggested_edits)
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.TagSynonyms.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.TagSynonyms.Sort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.TagSynonyms.Sort.Applied">
            <summary>
            applied_count
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.TagSynonyms.Sort.Activity">
            <summary>
            last_applied_date
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Tags.Period">
            <summary>
            period
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Tags.Period.AllTime">
            <summary>
            all_time
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Tags.Period.Month">
            <summary>
            month
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Tags.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Tags.Sort.Popular">
            <summary>
            count
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Tags.Sort.Activity">
            <summary>
            the creation_date of the last question asked with the tag
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Tags.Sort.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.UserTimelines.TimelineType">
            <summary>
            timeline_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.UserTimelines.TimelineType.Commented">
            <summary>
            commented
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.UserTimelines.TimelineType.Asked">
            <summary>
            asked
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.UserTimelines.TimelineType.Answered">
            <summary>
            answered
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.UserTimelines.TimelineType.Badge">
            <summary>
            badge
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.UserTimelines.TimelineType.Revision">
            <summary>
            revision
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.UserTimelines.TimelineType.Accepted">
            <summary>
            accepted
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.UserTimelines.TimelineType.Reviewed">
            <summary>
            reviewed
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.UserTimelines.TimelineType.Suggested">
            <summary>
            suggested
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Users.Sort">
            <summary>
            sort
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Users.Sort.Reputation">
            <summary>
            reputation
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Users.Sort.Creation">
            <summary>
            creation_date
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Users.Sort.Name">
            <summary>
            display_name
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Users.Sort.Modified">
            <summary>
            last_modified_date
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.Users.UserType">
            <summary>
            user_type
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Users.UserType.Unregistered">
            <summary>
            unregistered
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Users.UserType.Registered">
            <summary>
            registered
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Users.UserType.Moderator">
            <summary>
            moderator
            </summary>
        </member>
        <member name="F:StackExchange.StacMan.Users.UserType.DoesNotExist">
            <summary>
            does_not_exist
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.StacManResponse`1">
            <summary>
            StacMan API response
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManResponse`1.Success">
            <summary>
            True if the API call was successful.
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManResponse`1.Data">
            <summary>
            Data returned by the Stack Exchange API method.
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManResponse`1.Error">
            <summary>
            Non-null whenever Success is false.
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManResponse`1.ReceivedApiResponse">
            <summary>
            True if the underlying Stack Exchange API method responded, regardless of success.
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManResponse`1.ApiUrl">
            <summary>
            The url of the underlying Stack Exchange API method.
            Useful for debugging.
            </summary>
        </member>
        <member name="P:StackExchange.StacMan.StacManResponse`1.RawData">
            <summary>
            Response of the request made to the underlying Stack Exchange API method.
            Useful for debugging.
            </summary>
        </member>
        <member name="T:StackExchange.StacMan.StacManType">
            <summary>
            Empty base class for ease of StacMan design.
            Nothing to see here, move along.
            </summary>
        </member>
    </members>
</doc>
